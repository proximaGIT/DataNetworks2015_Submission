/* Group 7
Muhammad Lathif Pambudi <s8mupamb@stud.uni-saarland.de> (2556858)
Praharsha Sirsi <s8prsirs@stud.uni-saarland.de> (2557724)

Task1ab Description:
-The model defines the protocol described in the modelling lab 1 - Task 1
-In the model, the probability that the student keeps asking another question is modelled without the use of palt. However it gives the same result.
	Uni(0,1) gives a value between 0 and 1, which is compared with the probablity constraint of 1/(n+1), if it is less than or equal to the value, then student
	asks another question, otherwise the student stops asking questions. The same can be verified by collecting traces in modes with run length of 10.
-A flag (batch_finish) is set when the student is done asking questions. This flag is used for the lecturer to break out of the loop of answering questions of
	the acknowledged student.
-The "tau" actions at the end of both student and lecturer processes are there only for debugging purposes and represent no particular solution in the question
-"Pr_stud_leave_hall" is the property to answer question: "the probability that the student eventually leaves the lecture hall"
-"Pr_stud_leave_hall_before" is the property to answer question: "the probability that the student leaves the lecture hall before at least 5 questions have been
	answered"
-"No_of_question_aswred" is the property to answer question: "the expected number of questions that have been answered once the student leaves"

Task1ab Modes Settings:
-Scheduler: ASAP
-Batch Size: 1
-Runs: 1000
-Show Initial State: False
-Collect Traces: False

Task1ab Results: 
Run1: Analysis results for Task1ab.modest
			Total time: 0.1 s
			
			+ Property Pr_done
			  Probability: 1
			  Runs:        1000
			  Time:        0.1 s
			
			+ Property Pr_stud_leave_hall
			  Probability: 1
			  Runs:        1000
			  Time:        0.1 s
			
			+ Property Pr_stud_leave_hall_before
			  Probability: 0.820000000000001
			  Runs:        1000
			  Time:        0.1 s
			
			+ Property No_of_question_aswred
			  Mean: 2.875
			  Runs: 1000
			  Time: 0.1 s
			  
		
Run2: Analysis results for Task1ab.modest
			Total time: 0.1 s
			
			+ Property Pr_done
			  Probability: 1
			  Runs:        1000
			  Time:        0.1 s
			
			+ Property Pr_stud_leave_hall
			  Probability: 1
			  Runs:        1000
			  Time:        0.1 s
			
			+ Property Pr_stud_leave_hall_before
			  Probability: 0.822
			  Runs:        1000
			  Time:        0.1 s
			
			+ Property No_of_question_aswred
			  Mean: 2.107
			  Runs: 1000
			  Time: 0.1 s
			  
			  
Run3: Analysis results for Task1ab.modest
			Total time: 0.1 s
			
			+ Property Pr_done
			  Probability: 1
			  Runs:        1000
			  Time:        0.1 s
			
			+ Property Pr_stud_leave_hall
			  Probability: 1
			  Runs:        1000
			  Time:        0.1 s
			
			+ Property Pr_stud_leave_hall_before
			  Probability: 0.747999999999999
			  Runs:        1000
			  Time:        0.1 s
			
			+ Property No_of_question_aswred
			  Mean: 2.778
			  Runs: 1000
			  Time: 0.1 s
*/


//actions initiated by the student
action raise_hand, ask_question, leave_hall;
//actions initiated by the lecturer
action ack_question, answer_question, ignore_student;

int n;
int ignore_count;
int ans_q_cnt;
bool batch_finish = false;

property Pr_done = Pmax(<> (done));
property Pr_stud_leave_hall = Pmax(<> (stud_leave_hall));
property Pr_stud_leave_hall_before = Pmax(<> (stud_leave_hall_before));
property No_of_question_aswred = Xmax(ans_q_cnt | stud_leave_hall);

bool stud_leave_hall = false;
bool stud_leave_hall_before = false;
bool done = false;
bool ask_again = false;
real delay_time = 0;

process student() {
	do{
		:: when(ignore_count < 3)
			raise_hand {= batch_finish = false =};
			alt {
				:: ack_question;
					ask_question;
					answer_question{= n = 1, ask_again = Uni(0,1) <= 1 / (n + 1) =};
					while(ask_again){
						ask_question;
						answer_question {= n++, ask_again = Uni(0,1) <= 1 / (n + 1) =}
					};
					tau {= batch_finish = true =}
				:: ignore_student
			};
			delay(Exp(1/300)) tau 
		:: when(ignore_count >= 3) 
			leave_hall {= ignore_count = 0, stud_leave_hall = true, stud_leave_hall_before = (ans_q_cnt < 5) =}; break
	};
	tau {= done = true =}
}

process lecturer() {
	do{
		raise_hand;
		palt {
			:1: ack_question {= ignore_count = 0 =};
				 do{
				 	:: when(!batch_finish)
						ask_question;
						delay(Uni(30,120)) answer_question {= ans_q_cnt++ =}
					:: when(batch_finish) break
				 }
			:3: ignore_student {= ignore_count++ =}
		}
	};
	tau {= done = true =}
}

par {
	:: student()
	:: lecturer()
}
